# -*- coding: utf-8 -*-
"""
@Time    : 2024/11/23 下午7:12
@Author  : Kend
@FileName: yolov5_predictor.py
@Software: PyCharm
@modifier:
"""

import cv2
import torch
from core.detection.post_process_image import postprocess
from core.detection.preprocess_image import preprocess_image
from core.detection.yolov5 import DetectMultiBackend


class Yolov5Predictor:

    def __init__(self, ckpt_path, input_size=(640, 640), fp16=False, iou_type='iou'):

        self.device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
        self.weights_path = ckpt_path
        # 设置图像预处理参数，当然这里只是为了保证推理视频帧的和训练的数据增强保持一致 NOTE yolov5不需要
        # self.rgb_means = (0.485, 0.456, 0.406)  # 设置RGB通道的均值。
        # self.std = (0.229, 0.224, 0.225)  # 设置RGB通道的标准差。
        self.rgb_means = None
        self.std = None
        self.iou_type = iou_type
        self.input_size = input_size
        self.fp16 = fp16
        # ckpt
        self.model = self.load_yolo_model()

    def load_yolo_model(self):
        model = DetectMultiBackend(self.weights_path, device=self.device, fp16=self.fp16)
        return model

    def predict(self, image, timer=None):
        if timer is not None:
            timer.start()
        # 处理图像路径
        if isinstance(image, str):
            image = cv2.imread(image)
        img, ratio = preprocess_image(image, self.input_size, self.rgb_means, self.std)
        # print("ratio:", ratio)  # 0.5
        im = torch.from_numpy(img).unsqueeze(0).float().to(self.device)  # 多张图的unsqueeze不一定是0 NOTE
        if self.fp16:
            im = im.half()  # to FP16
        else:
            im = im.float()  # uint8 to float32

        # =========================== 检测 ===================================
        with torch.no_grad():
            person_pre = self.model(im)[0]  # pt模型推理
            outputs = postprocess(
                person_pre, 1, 0.01, 0.4, iou=self.iou_type
            )
            # person_pre = self.model(im) # pt模型推理
            # print(person_pre, "person_pre")  # [[[...]]]
            # self.num_classes, self.confthre, self.nmsthre(1, 0.001, 0.7)
            # outputs = postprocess(
            #     person_pre, 1, 0.01, 0.45
            # )
            # print("person_pre", person_pre)
            # outputs = non_max_suppression(
            #     person_pre,
            #     conf_thres=0.01,
            #     iou_thres=0.45,
            #     classes=None,
            #     agnostic=True,
            #     max_det=100,
            #     nm=0  # 目标检测设置为0
            # )
            # print(outputs, "outputs")
        # output_cpu = []
        # # 遍历元组中的每个张量
        # for tensor in outputs:
        #     # 将张量移动到CPU上，并添加到列表中
        #     output_cpu.append(tensor.cpu().numpy())  # NOTE yolov5后处理后现在得到了七个特征值
        # print("tensor_cpu:", output_cpu)
        # 放缩binding boxes -> image 原图大小
        # person_pre[0][:, :4] = scale_boxes(im.shape[2:], person_pre[0][:, :4],
        #                                    image.shape).round()
        # print('person_pre1', person_pre[0])
        # for *xyxy, conf, _cls in person_pre[0]:  # 遍历检测到的人
        #     # 位置+类别
        #     person_result.append([
        #         int(xyxy[0]), int(xyxy[1]), int(xyxy[2]), int(xyxy[3]), _cls.item(), conf.item()]
        #         )
        return outputs[0], ratio



if __name__ == '__main__':
    import sys
    import os
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
    os.chdir(project_root)
    import time
    time1 = time.time()
    model_path = 'weights/yolov5n.pt'
    predictor = Yolov5Predictor(ckpt_path=model_path, input_size=(640, 640), fp16=False, iou_type='giou')
    img_path = "tests/frame_0000.jpg"
    img = cv2.imread(img_path)
    output, _ = predictor.predict(img)  # torch.Size([88, 7])
    print(output.shape)  #
    # 将张量转换为NumPy数组
    # output_cpu = []
    # # 遍历元组中的每个张量
    # for tensor in output[0]:
    #     # 将张量移动到CPU上，并添加到列表中
    #     output_cpu.append(tensor.cpu().numpy())  # NOTE yolov5后处理后得到了七个特征值
    # print("tensor_cpu:", output_cpu)
    output_ = output
    # print(output_)
    if output_.shape[1] == 5:
        scores = output_[:, 4]
        bboxes = output_[:, :4]
    else:
        output_results = output_.cpu().numpy()
        scores = output_results[:, 4] * output_results[:, 5]
        bboxes = output_results[:, :4]  # x1y1x2y2
    print(f"scores:{scores}")  # scores:[0.9605565  0.9561169  0.9507537  0.94548774 0.9430547  0.9289429.....]
    print(len(scores))  # iou 84 0.79s  giou : 88 0.82s  ciou: 88 0.87s
    print('time:', time.time()-time1)



"""
D:\ProgramData\miniconda3\envs\torch\python.exe D:\kend\work\Hk_Tracker\detector_head\predictor_yolov5.py 
detect model to cuda:0
[tensor([[4.69231e+02, 2.48535e+02, 5.82998e+02, 5.00723e+02, 9.77872e-01, 9.77856e-01, 0.00000e+00],
        [1.95505e+02, 2.56412e+02, 2.56704e+02, 4.01044e+02, 9.77698e-01, 9.77689e-01, 0.00000e+00],
        [1.58425e+02, 3.06321e+02, 2.00937e+02, 4.24358e+02, 9.74177e-01, 9.74162e-01, 0.00000e+00],
        [7.78140e+01, 2.49202e+02, 1.65195e+02, 4.90649e+02, 9.62554e-01, 9.62539e-01, 0.00000e+00],
        [3.36344e+02, 2.73434e+02, 3.77000e+02, 3.91903e+02, 9.52741e-01, 9.52727e-01, 0.00000e+00],
        [2.73728e+02, 2.70099e+02, 3.30344e+02, 4.00477e+02, 9.49159e-01, 9.49143e-01, 0.00000e+00],
        [3.80000e+02, 2.62326e+02, 4.25677e+02, 3.95118e+02, 9.45689e-01, 9.45671e-01, 0.00000e+00],
        [3.47295e+02, 2.18949e+02, 3.78648e+02, 2.72092e+02, 9.27775e-01, 9.27760e-01, 0.00000e+00],
        [3.10048e+02, 2.46029e+02, 3.41020e+02, 3.61141e+02, 9.13224e-01, 9.13212e-01, 0.00000e+00],
        [5.87423e+02, 2.53029e+02, 6.39984e+02, 5.01203e+02, 8.99819e-01, 8.99803e-01, 0.00000e+00],
        [6.69840e+01, 2.38651e+02, 1.20476e+02, 4.03187e+02, 8.72078e-01, 8.72065e-01, 0.00000e+00],
        [1.33575e+02, 2.47831e+02, 1.79499e+02, 3.14049e+02, 8.37591e-01, 8.37576e-01, 0.00000e+00],
        [2.69597e+02, 2.20300e+02, 2.88243e+02, 2.80542e+02, 6.53190e-01, 6.53180e-01, 0.00000e+00],
        [1.49880e+02, 2.27231e+02, 1.75973e+02, 2.60284e+02, 6.29174e-01, 6.29161e-01, 0.00000e+00],
        [7.84396e+01, 2.38446e+02, 1.21262e+02, 2.95064e+02, 4.37226e-01, 4.37221e-01, 0.00000e+00],
        [3.02936e+02, 2.15009e+02, 3.31303e+02, 2.53924e+02, 7.76878e-02, 7.76863e-02, 0.00000e+00],
        [3.30104e+02, 2.30412e+02, 3.48501e+02, 2.63348e+02, 5.59305e-02, 5.59297e-02, 0.00000e+00],
        [3.71758e+02, 2.10982e+02, 4.10361e+02, 2.71392e+02, 4.77000e-02, 4.76991e-02, 0.00000e+00],
        [4.07507e+02, 2.13864e+02, 4.36838e+02, 2.63240e+02, 1.60170e-02, 1.60168e-02, 0.00000e+00]], device='cuda:0')]
tensor_cpu: [array([[     469.23,      248.54,         583,      500.72,     0.97787,     0.97786,           0],
       [     195.51,      256.41,       256.7,      401.04,      0.9777,     0.97769,           0],
       [     158.42,      306.32,      200.94,      424.36,     0.97418,     0.97416,           0],
       [     77.814,       249.2,      165.19,      490.65,     0.96255,     0.96254,           0],
       [     336.34,      273.43,         377,       391.9,     0.95274,     0.95273,           0],
       [     273.73,       270.1,      330.34,      400.48,     0.94916,     0.94914,           0],
       [        380,      262.33,      425.68,      395.12,     0.94569,     0.94567,           0],
       [      347.3,      218.95,      378.65,      272.09,     0.92777,     0.92776,           0],
       [     310.05,      246.03,      341.02,      361.14,     0.91322,     0.91321,           0],
       [     587.42,      253.03,      639.98,       501.2,     0.89982,      0.8998,           0],
       [     66.984,      238.65,      120.48,      403.19,     0.87208,     0.87207,           0],
       [     133.58,      247.83,       179.5,      314.05,     0.83759,     0.83758,           0],
       [      269.6,       220.3,      288.24,      280.54,     0.65319,     0.65318,           0],
       [     149.88,      227.23,      175.97,      260.28,     0.62917,     0.62916,           0],
       [      78.44,      238.45,      121.26,      295.06,     0.43723,     0.43722,           0],
       [     302.94,      215.01,       331.3,      253.92,    0.077688,    0.077686,           0],
       [      330.1,      230.41,       348.5,      263.35,     0.05593,     0.05593,           0],
       [     371.76,      210.98,      410.36,      271.39,      0.0477,    0.047699,           0],
       [     407.51,      213.86,      436.84,      263.24,    0.016017,    0.016017,           0]], dtype=float32)]
0.7160553932189941


[tensor([[4.69231e+02, 2.48535e+02, 5.82998e+02, 5.00723e+02, 9.77872e-01, 9.99983e-01, 0.00000e+00],
        [1.95505e+02, 2.56412e+02, 2.56704e+02, 4.01044e+02, 9.77698e-01, 9.99991e-01, 0.00000e+00],
        [1.58425e+02, 3.06321e+02, 2.00937e+02, 4.24358e+02, 9.74177e-01, 9.99984e-01, 0.00000e+00],
        [7.78140e+01, 2.49202e+02, 1.65195e+02, 4.90649e+02, 9.62554e-01, 9.99984e-01, 0.00000e+00],
        [3.36344e+02, 2.73434e+02, 3.77000e+02, 3.91903e+02, 9.52741e-01, 9.99985e-01, 0.00000e+00],
        [2.73728e+02, 2.70099e+02, 3.30344e+02, 4.00477e+02, 9.49159e-01, 9.99983e-01, 0.00000e+00],
        [3.80000e+02, 2.62326e+02, 4.25677e+02, 3.95118e+02, 9.45689e-01, 9.99982e-01, 0.00000e+00],
        [3.47295e+02, 2.18949e+02, 3.78648e+02, 2.72092e+02, 9.27775e-01, 9.99984e-01, 0.00000e+00],
        [3.10048e+02, 2.46029e+02, 3.41020e+02, 3.61141e+02, 9.13224e-01, 9.99987e-01, 0.00000e+00],
        [5.87423e+02, 2.53029e+02, 6.39984e+02, 5.01203e+02, 8.99819e-01, 9.99982e-01, 0.00000e+00],
        [6.69840e+01, 2.38651e+02, 1.20476e+02, 4.03187e+02, 8.72078e-01, 9.99986e-01, 0.00000e+00],
        [1.33575e+02, 2.47831e+02, 1.79499e+02, 3.14049e+02, 8.37591e-01, 9.99982e-01, 0.00000e+00],
        [2.69597e+02, 2.20300e+02, 2.88243e+02, 2.80542e+02, 6.53190e-01, 9.99984e-01, 0.00000e+00],
        [1.49880e+02, 2.27231e+02, 1.75973e+02, 2.60284e+02, 6.29174e-01, 9.99980e-01, 0.00000e+00],
        [7.84396e+01, 2.38446e+02, 1.21262e+02, 2.95064e+02, 4.37226e-01, 9.99987e-01, 0.00000e+00],
        [3.02936e+02, 2.15009e+02, 3.31303e+02, 2.53924e+02, 7.76878e-02, 9.99980e-01, 0.00000e+00],
        [3.30104e+02, 2.30412e+02, 3.48501e+02, 2.63348e+02, 5.59305e-02, 9.99986e-01, 0.00000e+00],
        [3.71758e+02, 2.10982e+02, 4.10361e+02, 2.71392e+02, 4.77000e-02, 9.99981e-01, 0.00000e+00],
        [4.07507e+02, 2.13864e+02, 4.36838e+02, 2.63240e+02, 1.60170e-02, 9.99984e-01, 0.00000e+00]], device='cuda:0')]
tensor_cpu: [array([[     469.23,      248.54,         583,      500.72,     0.97787,     0.99998,           0],
       [     195.51,      256.41,       256.7,      401.04,      0.9777,     0.99999,           0],
       [     158.42,      306.32,      200.94,      424.36,     0.97418,     0.99998,           0],
       [     77.814,       249.2,      165.19,      490.65,     0.96255,     0.99998,           0],
       [     336.34,      273.43,         377,       391.9,     0.95274,     0.99998,           0],
       [     273.73,       270.1,      330.34,      400.48,     0.94916,     0.99998,           0],
       [        380,      262.33,      425.68,      395.12,     0.94569,     0.99998,           0],
       [      347.3,      218.95,      378.65,      272.09,     0.92777,     0.99998,           0],
       [     310.05,      246.03,      341.02,      361.14,     0.91322,     0.99999,           0],
       [     587.42,      253.03,      639.98,       501.2,     0.89982,     0.99998,           0],
       [     66.984,      238.65,      120.48,      403.19,     0.87208,     0.99999,           0],
       [     133.58,      247.83,       179.5,      314.05,     0.83759,     0.99998,           0],
       [      269.6,       220.3,      288.24,      280.54,     0.65319,     0.99998,           0],
       [     149.88,      227.23,      175.97,      260.28,     0.62917,     0.99998,           0],
       [      78.44,      238.45,      121.26,      295.06,     0.43723,     0.99999,           0],
       [     302.94,      215.01,       331.3,      253.92,    0.077688,     0.99998,           0],
       [      330.1,      230.41,       348.5,      263.35,     0.05593,     0.99999,           0],
       [     371.76,      210.98,      410.36,      271.39,      0.0477,     0.99998,           0],
       [     407.51,      213.86,      436.84,      263.24,    0.016017,     0.99998,           0]], dtype=float32)]
0.6872787475585938

D:\ProgramData\miniconda3\envs\torch\python.exe D:\kend\work\Hk_Tracker\detector_head\predictor_yolov5.py 
detect model to cuda:0
[tensor([[ 4.70410e+02,  1.05163e+02,  5.82935e+02,  3.61732e+02,  9.81771e-01,  9.81749e-01,  0.00000e+00],
        [ 1.95767e+02,  1.17277e+02,  2.56141e+02,  2.59442e+02,  9.74174e-01,  9.74158e-01,  0.00000e+00],
        [ 1.58670e+02,  1.66052e+02,  2.00632e+02,  2.83841e+02,  9.71441e-01,  9.71426e-01,  0.00000e+00],
        [ 2.73380e+02,  1.35091e+02,  3.29798e+02,  2.59887e+02,  9.61673e-01,  9.61657e-01,  0.00000e+00],
        [ 3.79838e+02,  1.23277e+02,  4.31947e+02,  2.54327e+02,  9.60289e-01,  9.60275e-01,  0.00000e+00],
        [ 7.88297e+01,  1.12019e+02,  1.64506e+02,  3.45231e+02,  9.59613e-01,  9.59594e-01,  0.00000e+00],
        [ 3.35027e+02,  1.32414e+02,  3.77914e+02,  2.52031e+02,  9.49899e-01,  9.49884e-01,  0.00000e+00],
        [ 3.10339e+02,  1.04977e+02,  3.40715e+02,  2.21348e+02,  9.26152e-01,  9.26140e-01,  0.00000e+00],
        [ 1.50237e+02,  8.80482e+01,  1.76097e+02,  1.22473e+02,  9.18777e-01,  9.18763e-01,  0.00000e+00],
        [ 3.46902e+02,  7.84543e+01,  3.78315e+02,  1.37908e+02,  9.13198e-01,  9.13183e-01,  0.00000e+00],
        [ 6.80792e+01,  9.92064e+01,  1.19291e+02,  2.62117e+02,  9.05599e-01,  9.05582e-01,  0.00000e+00],
        [ 5.91861e+02,  1.16009e+02,  6.40161e+02,  3.61202e+02,  8.72727e-01,  8.72712e-01,  0.00000e+00],
        [ 2.69924e+02,  8.10211e+01,  2.87966e+02,  1.40324e+02,  8.13325e-01,  8.13311e-01,  0.00000e+00],
        [ 1.35666e+02,  1.10759e+02,  1.77480e+02,  1.66544e+02,  5.51843e-01,  5.51835e-01,  0.00000e+00],
        [ 3.71980e+02,  7.43605e+01,  4.09250e+02,  1.27498e+02,  1.59861e-01,  1.59857e-01,  0.00000e+00],
        [ 8.00177e+01,  1.00693e+02,  1.20075e+02,  1.51421e+02,  9.98474e-02,  9.98448e-02,  0.00000e+00],
        [ 4.06805e+02,  7.38911e+01,  4.37910e+02,  1.22397e+02,  7.91814e-02,  7.91803e-02,  0.00000e+00],
        [ 1.92971e+02,  8.71632e+01,  2.18563e+02,  1.11996e+02,  2.11832e-02,  2.11829e-02,  0.00000e+00],
        [-2.17487e-01,  3.82973e+01,  1.36692e+01,  1.94940e+02,  1.23265e-02,  1.23263e-02,  0.00000e+00]], device='cuda:0')]
tensor_cpu: [array([[     470.41,      105.16,      582.93,      361.73,     0.98177,     0.98175,           0],
       [     195.77,      117.28,      256.14,      259.44,     0.97417,     0.97416,           0],
       [     158.67,      166.05,      200.63,      283.84,     0.97144,     0.97143,           0],
       [     273.38,      135.09,       329.8,      259.89,     0.96167,     0.96166,           0],
       [     379.84,      123.28,      431.95,      254.33,     0.96029,     0.96027,           0],
       [      78.83,      112.02,      164.51,      345.23,     0.95961,     0.95959,           0],
       [     335.03,      132.41,      377.91,      252.03,      0.9499,     0.94988,           0],
       [     310.34,      104.98,      340.72,      221.35,     0.92615,     0.92614,           0],
       [     150.24,      88.048,       176.1,      122.47,     0.91878,     0.91876,           0],
       [      346.9,      78.454,      378.31,      137.91,      0.9132,     0.91318,           0],
       [     68.079,      99.206,      119.29,      262.12,      0.9056,     0.90558,           0],
       [     591.86,      116.01,      640.16,       361.2,     0.87273,     0.87271,           0],
       [     269.92,      81.021,      287.97,      140.32,     0.81332,     0.81331,           0],
       [     135.67,      110.76,      177.48,      166.54,     0.55184,     0.55183,           0],
       [     371.98,       74.36,      409.25,       127.5,     0.15986,     0.15986,           0],
       [     80.018,      100.69,      120.08,      151.42,    0.099847,    0.099845,           0],
       [     406.81,      73.891,      437.91,       122.4,    0.079181,     0.07918,           0],
       [     192.97,      87.163,      218.56,         112,    0.021183,    0.021183,           0],
       [   -0.21749,      38.297,      13.669,      194.94,    0.012326,    0.012326,           0]], dtype=float32)]
0.9338579177856445
"""

